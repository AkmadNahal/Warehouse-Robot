{"version":3,"sources":["decisionmaker.js"],"names":[],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAGA,SAAS,YAAT,CAAsB,GAAtB,EAA2B;;;;AAKvB,QAAI,GAAJ,GAAU,+BAAV;AACA,QAAI,gBAAgB,EAApB;AACA,QAAI,QAAQ,EAAZ;AACA,QAAI,oBAAoB,mDAAxB;AACA,QAAI,eAAe,CAAnB;AACA,QAAI,WAAW,CAAf;AACA,QAAI,eAAe,IAAnB;AACA,QAAI,aAAa,EAAjB;;AAEA,+BAAS,KAAT,CAAe,iBAAf,EAAkC,UAAS,GAAT,EAAc,GAAd,EAAmB;AACjD,uBAAe,IAAI,CAAJ,EAAO,MAAtB;AACA,aAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,YAAnB,EAAiC,GAAjC,EAAsC;AAClC,oBAAQ,+CAA+C,QAA/C,GAA0D,qDAAlE;AACA,uCAAS,KAAT,CAAe,KAAf,EAAsB,UAAS,GAAT,EAAc,GAAd,EAAmB;AACrC,8BAAc,IAAd,CAAmB,IAAI,CAAJ,EAAO,CAAP,CAAnB;;AAEA,oBAAI,cAAc,MAAd,KAAyB,YAA7B,EAA2C;AACvC,4BAAQ,GAAR,CAAY,aAAZ;;AAEA,yBAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,cAAc,MAAjC,EAAyC,GAAzC,EAA8C;AAC1C,4BAAI,IAAI,QAAJ,CAAa,GAAb,GAAmB,cAAc,CAAd,EAAiB,mBAApC,IACA,IAAI,QAAJ,CAAa,GAAb,GAAmB,cAAc,CAAd,EAAiB,mBADpC,IAEA,IAAI,SAAJ,CAAc,GAAd,GAAoB,cAAc,CAAd,EAAiB,SAFrC,IAGA,IAAI,SAAJ,CAAc,GAAd,GAAoB,cAAc,CAAd,EAAiB,SAHzC,EAIE;AACE,oCAAQ,GAAR,CAAY,WAAW,cAAc,CAAd,EAAiB,SAA5B,GAAwC,kBAApD;;AAEA,yDAAY,eAAZ,CAA4B,OAA5B,CAAoC,EAAC,iBAAiB,SAAS,cAAc,CAAd,EAAiB,SAA1B,CAAlB,EAApC,EAA8F,UAAS,GAAT,EAAc,IAAd,EAAoB;AAC9G,wCAAQ,GAAR,CAAY,IAAZ;AACA,oCAAG,KAAK,aAAL,GAAqB,KAAK,KAAL,CAAW,MAAnC,EAA2C;AACvC,4CAAQ,GAAR,CAAY,iBAAZ;AACA,iEAAY,eAAZ,CAA4B,MAA5B,CAAmC,EAAC,OAAO,KAAK,GAAb,EAAnC,EAAsD,EAAE,OAAO,EAAE,SAAS,GAAX,EAAT,EAAtD;AACA,mDAAe,KAAf;AACA,wCAAI,cAAc,MAAlB;AACA,iDAAa,IAAb;AACH,iCAND,MAMO;AACH,4CAAQ,GAAR,CAAY,qCAAqC,KAAK,aAA1C,GAA0D,gBAAtE;AACH;AACJ,6BAXD;AAYH;AACD,4BAAG,MAAM,cAAc,MAApB,IAA8B,MAAM,cAAc,MAAd,GAAqB,CAA5D,EAA+D;AAC3D,gCAAG,YAAH,EAAiB;;AAEb,wCAAQ,GAAR,CAAY,QAAZ;AACA,uCAAO,eAAP;AACH,6BAJD,MAIO;;AAEH,wCAAQ,GAAR,CAAY,WAAZ;AACA,uCAAO,kBAAP;AACH;AACJ;AACJ;AACJ;AACJ,aAxCD;AAyCA;AACH;AACJ,KA/CD;;;;;;;AA0DH;QACQ,Y,GAAA,Y","file":"decisionmaker-compiled.js","sourcesContent":["import { dbClient } from './../influxdb-compiled';\nimport { mongoClient } from './../mongodb-compiled';\nimport { ObjectID } from './../mongodb-compiled';\nimport { clientConSock } from './../websocket-compiled';\n\n\nfunction tryInsertBox(box) {\n\n\n    // Get latest values from timestamp\n\n    box._id = new ObjectID;\n    let influxResults = [];\n    let query = \"\";\n    let queryNrOfArduinos = \"SHOW TAG VALUES FROM Devices WITH KEY = Device_Id\";\n    let nrOfArduinos = 0;\n    let deviceId = 1;\n    let insertFailed = true;\n    let finalShelf = {};\n\n    dbClient.query(queryNrOfArduinos, function(err, res) {\n        nrOfArduinos = res[0].length;\n        for(let i = 0; i < nrOfArduinos; i++) {\n            query = \"select * from Devices  where Device_Id = '\" + deviceId + \"' and time > now() - 72h Order by time DESC limit 1\"\n            dbClient.query(query, function(err, res) {\n                influxResults.push(res[0][0]);\n\n                if (influxResults.length === nrOfArduinos) {\n                    console.log(influxResults);\n\n                    for(let j = 0; j < influxResults.length; j++) {\n                        if( box.prefTemp.max > influxResults[j].temperature_celsius &&\n                            box.prefTemp.min < influxResults[j].temperature_celsius &&\n                            box.prefLight.max > influxResults[j].light_lux &&\n                            box.prefLight.min < influxResults[j].light_lux\n                        ) {\n                            console.log('Shelf ' + influxResults[j].Device_Id + ' is within range');\n\n                            mongoClient.shelfCollection.findOne({\"shelfLocation\": parseInt(influxResults[j].Device_Id) }, function(err, res2) {\n                                console.log(res2);\n                                if(res2.shelfCapacity > res2.boxes.length) {\n                                    console.log('there is space!');\n                                    mongoClient.shelfCollection.update({\"_id\": res2._id}, { $push: { \"boxes\": box } });\n                                    insertFailed = false;\n                                    j = influxResults.length;\n                                    finalShelf = res2;\n                                } else {\n                                    console.log('Found a good shelf, but shelf + ' + res2.shelfLocation + ' has no space!');\n                                }\n                            });\n                        }\n                        if(j === influxResults.length || j === influxResults.length-1) {\n                            if(insertFailed) {\n  //                              clientConSock.emit('insert_failed');\n                                console.log('failed');\n                                return 'insert_failed';\n                            } else {\n//                                clientConSock.emit('insert_succeeded', finalShelf);\n                                console.log('succeeded');\n                                return 'insert_succeeded';\n                            }\n                        }\n                    }\n                }\n            });\n            deviceId++;\n        }\n    });\n\n\n    /*\n     var query = \"select * \" +\n     \"from Devices \" +\n     \"where time > '2016-04-20' and time < '2016-04-21'  and Device_Id = 'd08c7b150006'\";\n     */\n\n\n\n}\nexport { tryInsertBox };\n\n\n\n\n/*\n var box = {\n createdBy: 'john',\n prefTemp: {\n max: 24,\n min: 17\n },\n prefLight: {\n max: 4000,\n min: 0\n },\n pendingStorage: true\t\t// True when processed by the robot. When the robot is done, it is set to false\n }\n\nvar shelf = {\n    shelfLocation: 1,\n    shelfCapacity: 10,\n    boxes: []\t\t// An array of the boxObjects stored on the shelf, indexed by physical coordinate location\n}\n\n select * from Devices  where Device_Id = '3' and time > now() - 1h Order by time DESC limit 1\n\n\nvar user = {\n    userName: 'john',\n    password: 'test1'\n}\n\n*/\n\n"]}